#!/bin/bash
export PATH="$PATH:/home/simon/Apps/bin"
export VISUAL=vim;
export EDITOR=vim;
export MAGENTO_PATH="/home/simon/Documents/magently/training/mde/"

alias mkdir='mkdir -pv'
alias ll="ls -lAh"
alias r="ranger"
alias a="sudo apt"
alias A="sudo apt install"
alias p="pip"
alias P="pip install"
alias python="python3"
alias pip="pip3"
alias pip2="/home/simon/.local/bin/pip"
alias q="exit"
alias tb="nc termbin.com 9999"
alias wifi="nmtui"
alias config='/usr/bin/git --git-dir=/home/simon/.cfg/ --work-tree=/home/simon'
alias configMaster='/usr/bin/git --git-dir=/home/simon/.cfg/ --work-tree=/home/simon commit -a -m "Auto backup!"; /usr/bin/git --git-dir=/home/simon/.cfg/ --work-tree=/home/simon pull && /usr/bin/git --git-dir=/home/simon/.cfg/ --work-tree=/home/simon push'
alias configSlave='/usr/bin/git --git-dir=/home/simon/.cfg/ --work-tree=/home/simon pull --force'
alias watch="watch -n.1"
alias xclipp="xclip -selection clipboard"
alias help='cat $HOME/Scripts/my-scripts/help_message'
alias gong='playerctl pause && mpv https://bigsoundbank.com/UPLOAD/wav/1483.wav --volume=150 && playerctl play'
alias nyan='curl https://poptart.spinda.net'
alias b='cd ~/.Downloads; run_remote_file python3 https://gist.githubusercontent.com/Shirobachi/293c92aaa24dd57068c6e5775ee23cb0/raw/budget.py 06a74c8261eba81d8fd1c363e738d938; cd -'
alias cm='cd ~/Documents/magently/'
alias cmr='cm && r'
alias lock='sudo umount ~/Documents'
alias unlock='sudo mount -t ecryptfs ~/Documents ~/Documents -o ecryptfs_cipher=aes,ecryptfs_key_bytes=32,ecryptfs_passthrough=no,ecryptfs_enable_filename_crypto=no,ecryptfs_sig=$(cat /home/simon/.sig-key.txt)'

function mag(){
    cd $MAGENTO_PATH

    # If $1 = compile
    if [ "$1" = "compile" ]; then
        docker-compose exec app bash -c "bin/magento setup:di:compile"
    fi

    # If $1 = compile
    if [ "$1" = "flush" ]; then
        docker-compose exec app bash -c "bin/magento cache:flush"
    fi

    # check if successfull
    if [ "$?" = "0" ]; then
        notify-send "The command "$1" was successful!"

        # if $2 is set, exit
        if [ "$2" ]; then
            exit 0
        fi
    else
        notify-send --urgency=critical "The command "$1" was not successful!"
    fi

    cd -
}

function mpush(){
    VPN="chop-chop"

    # Try to connect to the VPN
    VPN_ID=$(nmcli con | grep "$VPN" | awk '{print $2}')
    echo "Connecting to VPN: $VPN"
    nmcli con up "$VPN_ID"

    # Check if last command was successful
    if [ $? -eq 0 ]; then
        # Add the files to the repo
        echo "Pushing to magently"
        git add .

        # Commit ammend the last commit no edit
        echo "Committing..."
        git commit --amend --no-edit

        # Push to the repo
        echo "Pushing..."
        git push origin HEAD:refs/for/master

        # Disconnect from the VPN
        VPN_ID=$(nmcli con | grep "$VPN" | awk '{print $2}')
        echo "Disconnecting from VPN: $VPN"
        nmcli con down "$VPN_ID"
        echo "Done!"
    else
        echo "Could not connect to VPN: $VPN"
        echo "DEBUG:"
        echo "VPN_ID: $VPN_ID"
        echo "VPN_STATUS: $(nmcli con | grep "$VPN" | awk '{print $3}')"
        echo "VPN_CONNECTED: $(nmcli con | grep "$VPN" | awk '{print $3}')"
        echo "VPN_LIST: $(nmcli con)"
    fi
}

function c() {
	# curl with all parameters
	curl -s cheat.sh/"$*"
}

function CODE(){
    code $1 && q
}

function hot(){
    ls "$2" | entr "$1" "$2" "$3"
}

function alarm(){
	termdown "$1" && gong && termdown
}

# $1 - running command
# $2 - url
# #3 - hash
# $4 - timeout (oprional)
function run_remote_file(){
	if [ -f '/tmp/remote_file' ]; then
		rm '/tmp/remote_file'
	fi

	# set $4 to default value if not set
	if [ -z "$4" ]; then
		timeout=300
	else
		timeout=$4
	fi
	echo "Downloading remote file..."
	curl -L --max-time "$timeout" -s "$2" -o /tmp/remote_file || { echo "Download failed" && return 1; }

	hash=$(md5sum /tmp/remote_file 2>/dev/null) || return &&
	hash=$(echo "$hash" | cut -d ' ' -f 1) &&
	if [ "$hash" != "$3" ]; then
		echo "File change detected! New hash: $hash"
		return
	else
		clear
		$1 /tmp/remote_file
	fi

	if [ -f '/tmp/remote_file' ]; then
		rm '/tmp/remote_file'
	fi
}

# if file called .bash_no_backup exists, run this
if [ -f "$HOME/.bash_no_backup" ]; then
		# shellcheck source=/dev/null
		source "$HOME/.bash_no_backup"
fi

neofetch
